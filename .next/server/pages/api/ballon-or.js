"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ballon-or";
exports.ids = ["pages/api/ballon-or"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fballon-or&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fballon-or.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fballon-or&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fballon-or.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_ballon_or_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/ballon-or.ts */ \"(api)/./pages/api/ballon-or.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_ballon_or_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_ballon_or_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/ballon-or\",\n        pathname: \"/api/ballon-or\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_ballon_or_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmJhbGxvbi1vciZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTJGYXBpJTJGYmFsbG9uLW9yLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ3FEO0FBQ3JEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxvREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsb0RBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vdHJhdGUvPzM3ZWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9iYWxsb24tb3IudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9iYWxsb24tb3JcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9iYWxsb24tb3JcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fballon-or&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fballon-or.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUU3QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFFO0FBRWxFLElBQUlJLElBQXlCLEVBQWNILGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLy4vbGliL3ByaXNtYS50cz85ODIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xuXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KClcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWFcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/prisma.ts\n");

/***/ }),

/***/ "(api)/./pages/api/ballon-or.ts":
/*!********************************!*\
  !*** ./pages/api/ballon-or.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/prisma */ \"(api)/./lib/prisma.ts\");\n// pages/api/ballon-or.ts - VERSION MISE À JOUR avec séparation stricte des sports\n\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const { sport = \"FOOTBALL\", position = \"all\", minMatches = \"3\", limit = \"50\", period = \"all-time\", excludeF1 = \"false\", excludeTennis = \"false\" } = req.query;\n        console.log(`🏆 Calcul classement - Sport: ${sport}, Min matchs: ${minMatches}`);\n        // 🔒 FILTRAGE STRICT PAR SPORT\n        let sportFilter = {};\n        if (sport === \"FOOTBALL\") {\n            // Pour le Ballon d'Or : STRICTEMENT football, exclu tennis et F1\n            sportFilter = {\n                sport: \"FOOTBALL\"\n            };\n            console.log(\"\\uD83D\\uDD12 Mode Ballon d'Or - Football uniquement\");\n        } else if (sport === \"TENNIS\") {\n            // Pour Tennis GOAT : STRICTEMENT tennis\n            sportFilter = {\n                sport: \"TENNIS\"\n            };\n            console.log(\"\\uD83C\\uDFBE Mode Tennis GOAT - Tennis uniquement\");\n        } else if (sport === \"F1\") {\n            // Pour Driver of the Fans : STRICTEMENT F1\n            sportFilter = {\n                sport: \"F1\"\n            };\n            console.log(\"\\uD83C\\uDFCE️ Mode Driver of the Fans - F1 uniquement\");\n        } else {\n            // Mode générique (pour autres sports)\n            sportFilter = {\n                sport: sport.toString().toUpperCase()\n            };\n        }\n        let positionFilter = {};\n        if (position !== \"all\") {\n            positionFilter = {\n                position: position.toString()\n            };\n        }\n        // 2. Filtre par période\n        let dateFilter = {};\n        const now = new Date();\n        switch(period){\n            case \"this-year\":\n                const yearAgo = new Date();\n                yearAgo.setFullYear(now.getFullYear() - 1);\n                dateFilter = {\n                    createdAt: {\n                        gte: yearAgo\n                    }\n                };\n                break;\n            case \"this-season\":\n                const seasonStart = new Date();\n                seasonStart.setMonth(8) // Septembre\n                ;\n                if (now.getMonth() < 8) {\n                    seasonStart.setFullYear(now.getFullYear() - 1);\n                }\n                dateFilter = {\n                    createdAt: {\n                        gte: seasonStart\n                    }\n                };\n                break;\n            case \"last-6-months\":\n                const sixMonthsAgo = new Date();\n                sixMonthsAgo.setMonth(now.getMonth() - 6);\n                dateFilter = {\n                    createdAt: {\n                        gte: sixMonthsAgo\n                    }\n                };\n                break;\n            default:\n                break;\n        }\n        // 3. 🚫 EXCLURE EXPLICITEMENT LES COACHS et filtres supplémentaires\n        let additionalFilters = {};\n        // Toujours exclure les coachs\n        additionalFilters.position = {\n            not: \"COACH\"\n        };\n        const playersWithRatings = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.player.findMany({\n            where: {\n                ...sportFilter,\n                ...additionalFilters,\n                ratings: {\n                    some: {\n                        ...dateFilter\n                    }\n                }\n            },\n            include: {\n                ratings: {\n                    where: dateFilter,\n                    include: {\n                        match: {\n                            select: {\n                                id: true,\n                                homeTeam: true,\n                                awayTeam: true,\n                                date: true,\n                                competition: true,\n                                sport: true\n                            }\n                        },\n                        user: {\n                            select: {\n                                id: true,\n                                name: true\n                            }\n                        }\n                    },\n                    orderBy: {\n                        createdAt: \"desc\"\n                    }\n                }\n            }\n        });\n        console.log(`👥 ${playersWithRatings.length} entités récupérées pour ${sport} (SANS COACHS)`);\n        // 🔒 DOUBLE FILTRAGE côté serveur pour être absolument sûr\n        const filteredPlayers = playersWithRatings.filter((player)=>{\n            // Filtrage strict par sport\n            if (sport === \"FOOTBALL\") {\n                return player.sport === \"FOOTBALL\" && !isPlayerFromOtherSport(player.name);\n            } else if (sport === \"TENNIS\") {\n                return player.sport === \"TENNIS\" || isTennisPlayer(player.name);\n            } else if (sport === \"F1\") {\n                return player.sport === \"F1\" || isF1Driver(player.name);\n            } else {\n                return player.sport === sport.toString().toUpperCase();\n            }\n        });\n        console.log(`🔒 Après filtrage strict: ${filteredPlayers.length} entités pour ${sport}`);\n        // 4. 🧠 FUSION INTELLIGENTE\n        const fusedPlayers = new Map();\n        for (const player of filteredPlayers){\n            if (player.ratings.length === 0) continue;\n            // Normaliser le nom selon le sport\n            const normalizedName = sport === \"F1\" ? normalizeDriverName(player.name) : sport === \"TENNIS\" ? normalizeTennisName(player.name) : normalizePlayerName(player.name);\n            // Si le joueur existe déjà, fusionner\n            if (fusedPlayers.has(normalizedName)) {\n                const existingPlayer = fusedPlayers.get(normalizedName);\n                existingPlayer.ratings.push(...player.ratings);\n                existingPlayer.teams.add(player.team);\n                if (player.position) {\n                    existingPlayer.positions.add(player.position);\n                }\n                console.log(`🔗 Fusion réussie: ${player.name} (${player.team}) avec ${existingPlayer.name}`);\n            } else {\n                // Nouveau joueur\n                fusedPlayers.set(normalizedName, {\n                    originalId: player.id,\n                    name: chooseBestName(player.name, normalizedName, sport),\n                    normalizedName,\n                    sport: player.sport,\n                    teams: new Set([\n                        player.team\n                    ]),\n                    positions: new Set(player.position ? [\n                        player.position\n                    ] : []),\n                    ratings: [\n                        ...player.ratings\n                    ]\n                });\n                console.log(`🆕 Nouvelle entité: ${player.name} (${player.team})`);\n            }\n        }\n        console.log(`🔗 Après fusion intelligente: ${fusedPlayers.size} entités uniques pour ${sport}`);\n        // 5. Calculer les statistiques\n        const candidates = [];\n        for (const [normalizedName, fusedPlayer] of fusedPlayers.entries()){\n            const ratings = fusedPlayer.ratings;\n            if (ratings.length < parseInt(minMatches.toString())) {\n                continue;\n            }\n            // Filtre position après fusion\n            if (position !== \"all\" && !fusedPlayer.positions.has(position)) {\n                continue;\n            }\n            // Calculer la moyenne globale\n            const avgRating = ratings.reduce((sum, r)=>sum + r.rating, 0) / ratings.length;\n            // Trouver le meilleur match\n            const bestRating = ratings.reduce((best, current)=>current.rating > best.rating ? current : best);\n            // Récupérer les matchs uniques\n            const uniqueMatches = new Map();\n            ratings.forEach((rating)=>{\n                const matchId = rating.match.id;\n                if (!uniqueMatches.has(matchId)) {\n                    uniqueMatches.set(matchId, {\n                        match: rating.match,\n                        ratings: []\n                    });\n                }\n                uniqueMatches.get(matchId).ratings.push(rating);\n            });\n            const totalMatches = uniqueMatches.size;\n            // Calculer les 5 matchs les plus récents\n            const recentMatches = Array.from(uniqueMatches.values()).sort((a, b)=>new Date(b.match.date).getTime() - new Date(a.match.date).getTime()).slice(0, 5).map((matchData)=>{\n                const matchAvgRating = matchData.ratings.reduce((sum, r)=>sum + r.rating, 0) / matchData.ratings.length;\n                const bestComment = matchData.ratings.find((r)=>r.comment)?.comment;\n                const playerTeam = getPlayerTeamForMatch(matchData.match, Array.from(fusedPlayer.teams));\n                return {\n                    matchId: matchData.match.id,\n                    rating: Number(matchAvgRating.toFixed(1)),\n                    comment: bestComment,\n                    homeTeam: matchData.match.homeTeam,\n                    awayTeam: matchData.match.awayTeam,\n                    date: matchData.match.date,\n                    competition: matchData.match.competition,\n                    team: playerTeam\n                };\n            });\n            // Calculer l'historique mensuel\n            const ratingHistory = calculateMonthlyHistory(ratings);\n            // Calculer la répartition par équipe\n            const teamBreakdown = calculateTeamBreakdown(ratings, Array.from(fusedPlayer.teams));\n            const bestMatchTeam = getPlayerTeamForMatch(bestRating.match, Array.from(fusedPlayer.teams));\n            candidates.push({\n                id: `fused_${normalizedName}`,\n                name: fusedPlayer.name,\n                normalizedName,\n                positions: Array.from(fusedPlayer.positions),\n                teams: Array.from(fusedPlayer.teams),\n                sport: fusedPlayer.sport,\n                avgRating: Number(avgRating.toFixed(2)),\n                totalRatings: ratings.length,\n                totalMatches,\n                bestMatch: {\n                    id: bestRating.match.id,\n                    rating: bestRating.rating,\n                    homeTeam: bestRating.match.homeTeam,\n                    awayTeam: bestRating.match.awayTeam,\n                    date: bestRating.match.date,\n                    competition: bestRating.match.competition,\n                    team: bestMatchTeam\n                },\n                recentMatches,\n                ratingHistory,\n                teamBreakdown\n            });\n        }\n        // 6. Trier par moyenne des notes\n        candidates.sort((a, b)=>{\n            if (Math.abs(a.avgRating - b.avgRating) < 0.01) {\n                return b.totalMatches - a.totalMatches;\n            }\n            return b.avgRating - a.avgRating;\n        });\n        // 7. Limiter les résultats\n        const topPlayers = candidates.slice(0, parseInt(limit.toString()));\n        // 8. Statistiques globales\n        const globalStats = {\n            totalPlayers: candidates.length,\n            totalRatings: candidates.reduce((sum, p)=>sum + p.totalRatings, 0),\n            totalMatches: candidates.reduce((sum, p)=>sum + p.totalMatches, 0),\n            avgRatingGlobal: candidates.length > 0 ? candidates.reduce((sum, p)=>sum + p.avgRating, 0) / candidates.length : 0,\n            topRating: topPlayers[0]?.avgRating || 0,\n            sportBreakdown: calculateSportBreakdown(candidates),\n            fusionStats: {\n                originalPlayers: playersWithRatings.length,\n                fusedPlayers: candidates.length,\n                fusionReduction: playersWithRatings.length - candidates.length\n            }\n        };\n        // 🏆 Nom du classement selon le sport\n        const classementName = sport === \"FOOTBALL\" ? \"Ballon d'Or\" : sport === \"TENNIS\" ? \"Tennis GOAT\" : sport === \"F1\" ? \"Driver of the Fans\" : `Top ${sport}`;\n        console.log(`🏆 ${classementName} calculé:`);\n        console.log(`   - ${playersWithRatings.length} entités originales`);\n        console.log(`   - ${candidates.length} entités après fusion intelligente`);\n        console.log(`   - Leader: ${topPlayers[0]?.name} (${topPlayers[0]?.avgRating}/10)`);\n        console.log(`   - Équipes: ${topPlayers[0]?.teams.join(\", \")}`);\n        res.status(200).json({\n            success: true,\n            ballonOr: topPlayers,\n            stats: globalStats,\n            filters: {\n                sport,\n                position,\n                period,\n                minMatches: parseInt(minMatches.toString()),\n                playersOnly: true,\n                excludeCoaches: true,\n                classementName\n            }\n        });\n    } catch (error) {\n        console.error(\"❌ Erreur classement:\", error);\n        res.status(500).json({\n            success: false,\n            error: \"Erreur serveur\",\n            details: error instanceof Error ? error.message : \"Erreur inconnue\"\n        });\n    }\n}\n// ============================================================================\n// 🔒 FONCTIONS DE FILTRAGE STRICT PAR SPORT\n// ============================================================================\n// Détecter si un joueur appartient à un autre sport (pour exclure du foot)\nfunction isPlayerFromOtherSport(name) {\n    const lowerName = name.toLowerCase();\n    // Joueurs de tennis célèbres\n    const tennisPlayers = [\n        \"djokovic\",\n        \"novak djokovic\",\n        \"nadal\",\n        \"rafael nadal\",\n        \"federer\",\n        \"roger federer\",\n        \"murray\",\n        \"andy murray\",\n        \"wawrinka\",\n        \"stan wawrinka\",\n        \"tsitsipas\",\n        \"stefanos tsitsipas\",\n        \"alcaraz\",\n        \"carlos alcaraz\",\n        \"sinner\",\n        \"jannik sinner\",\n        \"rublev\",\n        \"andrey rublev\",\n        \"zverev\",\n        \"alexander zverev\",\n        \"medvedev\",\n        \"daniil medvedev\",\n        \"thiem\",\n        \"dominic thiem\"\n    ];\n    // Pilotes F1 célèbres\n    const f1Drivers = [\n        \"verstappen\",\n        \"max verstappen\",\n        \"hamilton\",\n        \"lewis hamilton\",\n        \"leclerc\",\n        \"charles leclerc\",\n        \"norris\",\n        \"lando norris\",\n        \"russell\",\n        \"george russell\",\n        \"sainz\",\n        \"carlos sainz\",\n        \"alonso\",\n        \"fernando alonso\",\n        \"perez\",\n        \"sergio perez\",\n        \"checo perez\",\n        \"vettel\",\n        \"bottas\",\n        \"valtteri bottas\",\n        \"ricciardo\",\n        \"daniel ricciardo\"\n    ];\n    return [\n        ...tennisPlayers,\n        ...f1Drivers\n    ].some((player)=>lowerName.includes(player) || player.includes(lowerName));\n}\n// Détecter les joueurs de tennis\nfunction isTennisPlayer(name) {\n    const lowerName = name.toLowerCase();\n    const tennisPlayers = [\n        \"djokovic\",\n        \"novak djokovic\",\n        \"nadal\",\n        \"rafael nadal\",\n        \"federer\",\n        \"roger federer\",\n        \"murray\",\n        \"andy murray\",\n        \"wawrinka\",\n        \"stan wawrinka\",\n        \"tsitsipas\",\n        \"stefanos tsitsipas\",\n        \"alcaraz\",\n        \"carlos alcaraz\",\n        \"sinner\",\n        \"jannik sinner\",\n        \"rublev\",\n        \"andrey rublev\",\n        \"zverev\",\n        \"alexander zverev\",\n        \"medvedev\",\n        \"daniil medvedev\",\n        \"thiem\",\n        \"dominic thiem\",\n        \"kyrgios\",\n        \"nick kyrgios\",\n        \"shapovalov\",\n        \"denis shapovalov\",\n        \"auger-aliassime\",\n        \"felix auger-aliassime\"\n    ];\n    return tennisPlayers.some((player)=>lowerName.includes(player) || player.includes(lowerName));\n}\n// Détecter les pilotes F1\nfunction isF1Driver(name) {\n    const lowerName = name.toLowerCase();\n    const f1Drivers = [\n        \"verstappen\",\n        \"max verstappen\",\n        \"hamilton\",\n        \"lewis hamilton\",\n        \"leclerc\",\n        \"charles leclerc\",\n        \"norris\",\n        \"lando norris\",\n        \"russell\",\n        \"george russell\",\n        \"sainz\",\n        \"carlos sainz\",\n        \"alonso\",\n        \"fernando alonso\",\n        \"perez\",\n        \"sergio perez\",\n        \"checo perez\",\n        \"vettel\",\n        \"bottas\",\n        \"valtteri bottas\",\n        \"ricciardo\",\n        \"daniel ricciardo\",\n        \"gasly\",\n        \"pierre gasly\",\n        \"ocon\",\n        \"esteban ocon\",\n        \"stroll\",\n        \"lance stroll\",\n        \"tsunoda\",\n        \"yuki tsunoda\"\n    ];\n    return f1Drivers.some((driver)=>lowerName.includes(driver) || driver.includes(lowerName));\n}\n// ============================================================================\n// 🧠 FONCTIONS DE NORMALISATION PAR SPORT\n// ============================================================================\n// Normalisation pour le football\nfunction normalizePlayerName(name) {\n    let normalized = name.toLowerCase().trim().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").replace(/[^a-z\\s-]/g, \"\").replace(/\\s+/g, \" \").trim();\n    const footballMappings = {\n        \"l messi\": \"lionel messi\",\n        \"l. messi\": \"lionel messi\",\n        \"leo messi\": \"lionel messi\",\n        \"lionel messi\": \"lionel messi\",\n        \"messi\": \"lionel messi\",\n        \"k mbappe\": \"kylian mbappe\",\n        \"k. mbappe\": \"kylian mbappe\",\n        \"kylian mbappe\": \"kylian mbappe\",\n        \"mbappe\": \"kylian mbappe\",\n        \"c ronaldo\": \"cristiano ronaldo\",\n        \"c. ronaldo\": \"cristiano ronaldo\",\n        \"cristiano ronaldo\": \"cristiano ronaldo\",\n        \"ronaldo\": \"cristiano ronaldo\",\n        \"cr7\": \"cristiano ronaldo\",\n        \"r cherki\": \"rayan cherki\",\n        \"r. cherki\": \"rayan cherki\",\n        \"rayan cherki\": \"rayan cherki\",\n        \"cherki\": \"rayan cherki\",\n        \"a griezmann\": \"antoine griezmann\",\n        \"a. griezmann\": \"antoine griezmann\",\n        \"antoine griezmann\": \"antoine griezmann\",\n        \"griezmann\": \"antoine griezmann\",\n        \"neymar jr\": \"neymar\",\n        \"neymar junior\": \"neymar\",\n        \"neymar\": \"neymar\",\n        \"e haaland\": \"erling haaland\",\n        \"e. haaland\": \"erling haaland\",\n        \"erling haaland\": \"erling haaland\",\n        \"haaland\": \"erling haaland\",\n        \"vinicius jr\": \"vinicius junior\",\n        \"vinicius junior\": \"vinicius junior\",\n        \"vini jr\": \"vinicius junior\",\n        \"vinicius\": \"vinicius junior\"\n    };\n    if (footballMappings[normalized]) {\n        normalized = footballMappings[normalized];\n        console.log(`⭐ Star football détectée: \"${name}\" -> \"${normalized}\"`);\n    }\n    return normalized;\n}\n// 🎾 Normalisation pour le tennis\nfunction normalizeTennisName(name) {\n    let normalized = name.toLowerCase().trim().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").replace(/[^a-z\\s-]/g, \"\").replace(/\\s+/g, \" \").trim();\n    const tennisMappings = {\n        \"n djokovic\": \"novak djokovic\",\n        \"n. djokovic\": \"novak djokovic\",\n        \"novak djokovic\": \"novak djokovic\",\n        \"djokovic\": \"novak djokovic\",\n        \"r nadal\": \"rafael nadal\",\n        \"r. nadal\": \"rafael nadal\",\n        \"rafael nadal\": \"rafael nadal\",\n        \"rafa nadal\": \"rafael nadal\",\n        \"nadal\": \"rafael nadal\",\n        \"r federer\": \"roger federer\",\n        \"r. federer\": \"roger federer\",\n        \"roger federer\": \"roger federer\",\n        \"federer\": \"roger federer\",\n        \"a murray\": \"andy murray\",\n        \"a. murray\": \"andy murray\",\n        \"andy murray\": \"andy murray\",\n        \"murray\": \"andy murray\",\n        \"c alcaraz\": \"carlos alcaraz\",\n        \"c. alcaraz\": \"carlos alcaraz\",\n        \"carlos alcaraz\": \"carlos alcaraz\",\n        \"alcaraz\": \"carlos alcaraz\",\n        \"d medvedev\": \"daniil medvedev\",\n        \"d. medvedev\": \"daniil medvedev\",\n        \"daniil medvedev\": \"daniil medvedev\",\n        \"medvedev\": \"daniil medvedev\",\n        \"s tsitsipas\": \"stefanos tsitsipas\",\n        \"s. tsitsipas\": \"stefanos tsitsipas\",\n        \"stefanos tsitsipas\": \"stefanos tsitsipas\",\n        \"tsitsipas\": \"stefanos tsitsipas\"\n    };\n    if (tennisMappings[normalized]) {\n        normalized = tennisMappings[normalized];\n        console.log(`🎾 Star tennis détectée: \"${name}\" -> \"${normalized}\"`);\n    }\n    return normalized;\n}\n// 🏎️ Normalisation pour la F1\nfunction normalizeDriverName(name) {\n    let normalized = name.toLowerCase().trim().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").replace(/[^a-z\\s-]/g, \"\").replace(/\\s+/g, \" \").trim();\n    const driverMappings = {\n        \"m verstappen\": \"max verstappen\",\n        \"m. verstappen\": \"max verstappen\",\n        \"max verstappen\": \"max verstappen\",\n        \"verstappen\": \"max verstappen\",\n        \"l hamilton\": \"lewis hamilton\",\n        \"l. hamilton\": \"lewis hamilton\",\n        \"lewis hamilton\": \"lewis hamilton\",\n        \"hamilton\": \"lewis hamilton\",\n        \"c leclerc\": \"charles leclerc\",\n        \"c. leclerc\": \"charles leclerc\",\n        \"charles leclerc\": \"charles leclerc\",\n        \"leclerc\": \"charles leclerc\",\n        \"l norris\": \"lando norris\",\n        \"l. norris\": \"lando norris\",\n        \"lando norris\": \"lando norris\",\n        \"norris\": \"lando norris\",\n        \"g russell\": \"george russell\",\n        \"g. russell\": \"george russell\",\n        \"george russell\": \"george russell\",\n        \"russell\": \"george russell\",\n        \"c sainz\": \"carlos sainz\",\n        \"c. sainz\": \"carlos sainz\",\n        \"carlos sainz\": \"carlos sainz\",\n        \"sainz\": \"carlos sainz\",\n        \"f alonso\": \"fernando alonso\",\n        \"f. alonso\": \"fernando alonso\",\n        \"fernando alonso\": \"fernando alonso\",\n        \"alonso\": \"fernando alonso\",\n        \"s perez\": \"sergio perez\",\n        \"s. perez\": \"sergio perez\",\n        \"sergio perez\": \"sergio perez\",\n        \"checo perez\": \"sergio perez\",\n        \"perez\": \"sergio perez\"\n    };\n    if (driverMappings[normalized]) {\n        normalized = driverMappings[normalized];\n        console.log(`🏎️ Pilote détecté: \"${name}\" -> \"${normalized}\"`);\n    }\n    return normalized;\n}\n// 🎯 Fonction pour choisir le meilleur nom d'affichage selon le sport\nfunction chooseBestName(originalName, normalizedName, sport) {\n    if (sport === \"FOOTBALL\") {\n        const canonicalNames = {\n            \"lionel messi\": \"Lionel Messi\",\n            \"cristiano ronaldo\": \"Cristiano Ronaldo\",\n            \"kylian mbappe\": \"Kylian Mbapp\\xe9\",\n            \"neymar\": \"Neymar Jr\",\n            \"erling haaland\": \"Erling Haaland\",\n            \"vinicius junior\": \"Vinicius Jr\",\n            \"rayan cherki\": \"Rayan Cherki\",\n            \"antoine griezmann\": \"Antoine Griezmann\"\n        };\n        if (canonicalNames[normalizedName]) {\n            return canonicalNames[normalizedName];\n        }\n    } else if (sport === \"TENNIS\") {\n        const canonicalTennisNames = {\n            \"novak djokovic\": \"Novak Djokovic\",\n            \"rafael nadal\": \"Rafael Nadal\",\n            \"roger federer\": \"Roger Federer\",\n            \"andy murray\": \"Andy Murray\",\n            \"carlos alcaraz\": \"Carlos Alcaraz\",\n            \"daniil medvedev\": \"Daniil Medvedev\",\n            \"stefanos tsitsipas\": \"Stefanos Tsitsipas\"\n        };\n        if (canonicalTennisNames[normalizedName]) {\n            return canonicalTennisNames[normalizedName];\n        }\n    } else if (sport === \"F1\") {\n        const canonicalDriverNames = {\n            \"max verstappen\": \"Max Verstappen\",\n            \"lewis hamilton\": \"Lewis Hamilton\",\n            \"charles leclerc\": \"Charles Leclerc\",\n            \"lando norris\": \"Lando Norris\",\n            \"george russell\": \"George Russell\",\n            \"carlos sainz\": \"Carlos Sainz\",\n            \"fernando alonso\": \"Fernando Alonso\",\n            \"sergio perez\": \"Sergio P\\xe9rez\"\n        };\n        if (canonicalDriverNames[normalizedName]) {\n            return canonicalDriverNames[normalizedName];\n        }\n    }\n    // Capitalisation par défaut\n    return originalName.split(\" \").map((word)=>word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(\" \");\n}\n// ============================================================================\n// FONCTIONS UTILITAIRES (inchangées)\n// ============================================================================\nfunction getPlayerTeamForMatch(match, playerTeams) {\n    const homeTeam = match.homeTeam.toLowerCase();\n    const awayTeam = match.awayTeam.toLowerCase();\n    for (const team of playerTeams){\n        const teamLower = team.toLowerCase();\n        if (homeTeam.includes(teamLower) || teamLower.includes(homeTeam.split(\" \")[0])) {\n            return match.homeTeam;\n        }\n        if (awayTeam.includes(teamLower) || teamLower.includes(awayTeam.split(\" \")[0])) {\n            return match.awayTeam;\n        }\n        if (team.includes(\"France\") && (homeTeam.includes(\"france\") || awayTeam.includes(\"france\"))) {\n            return homeTeam.includes(\"france\") ? match.homeTeam : match.awayTeam;\n        }\n    }\n    return playerTeams[0] || \"\\xc9quipe inconnue\";\n}\nfunction calculateTeamBreakdown(ratings, teams) {\n    const teamStats = new Map();\n    teams.forEach((team)=>{\n        teamStats.set(team, {\n            team,\n            ratings: [],\n            matches: new Set()\n        });\n    });\n    ratings.forEach((rating)=>{\n        const playerTeam = getPlayerTeamForMatch(rating.match, teams);\n        const normalizedTeam = teams.find((t)=>t.toLowerCase().includes(playerTeam.toLowerCase()) || playerTeam.toLowerCase().includes(t.toLowerCase())) || teams[0];\n        if (teamStats.has(normalizedTeam)) {\n            teamStats.get(normalizedTeam).ratings.push(rating.rating);\n            teamStats.get(normalizedTeam).matches.add(rating.match.id);\n        }\n    });\n    return Array.from(teamStats.values()).filter((stats)=>stats.ratings.length > 0).map((stats)=>({\n            team: stats.team,\n            avgRating: Number((stats.ratings.reduce((sum, r)=>sum + r, 0) / stats.ratings.length).toFixed(2)),\n            matchCount: stats.matches.size,\n            ratingCount: stats.ratings.length\n        })).sort((a, b)=>b.avgRating - a.avgRating);\n}\nfunction calculateMonthlyHistory(ratings) {\n    const monthlyData = new Map();\n    ratings.forEach((rating)=>{\n        const date = new Date(rating.createdAt);\n        const monthKey = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, \"0\")}`;\n        if (!monthlyData.has(monthKey)) {\n            monthlyData.set(monthKey, {\n                ratings: [],\n                matches: new Set()\n            });\n        }\n        monthlyData.get(monthKey).ratings.push(rating.rating);\n        monthlyData.get(monthKey).matches.add(rating.match.id);\n    });\n    return Array.from(monthlyData.entries()).map(([month, data])=>({\n            month,\n            avgRating: Number((data.ratings.reduce((sum, r)=>sum + r, 0) / data.ratings.length).toFixed(2)),\n            matchCount: data.matches.size\n        })).sort((a, b)=>a.month.localeCompare(b.month)).slice(-12);\n}\nfunction calculateSportBreakdown(players) {\n    const breakdown = new Map();\n    players.forEach((player)=>{\n        if (!breakdown.has(player.sport)) {\n            breakdown.set(player.sport, {\n                count: 0,\n                totalRatings: 0\n            });\n        }\n        const data = breakdown.get(player.sport);\n        data.count++;\n        data.totalRatings += player.totalRatings;\n    });\n    return Array.from(breakdown.entries()).map(([sport, data])=>({\n            sport,\n            playerCount: data.count,\n            avgRating: players.filter((p)=>p.sport === sport).reduce((sum, p)=>sum + p.avgRating, 0) / data.count,\n            totalRatings: data.totalRatings\n        }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/ballon-or.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fballon-or&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fballon-or.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();