"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/f1-race-details/[id]";
exports.ids = ["pages/api/f1-race-details/[id]"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ff1-race-details%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ff1-race-details%2F%5Bid%5D.ts&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ff1-race-details%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ff1-race-details%2F%5Bid%5D.ts&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_f1_race_details_id_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/f1-race-details/[id].ts */ \"(api)/./pages/api/f1-race-details/[id].ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_f1_race_details_id_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_f1_race_details_id_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/f1-race-details/[id]\",\n        pathname: \"/api/f1-race-details/[id]\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_f1_race_details_id_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmYxLXJhY2UtZGV0YWlscyUyRiU1QmlkJTVEJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZmMS1yYWNlLWRldGFpbHMlMkYlNUJpZCU1RC50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNnRTtBQUNoRTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsNkRBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLDZEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLz80MWY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvZjEtcmFjZS1kZXRhaWxzL1tpZF0udHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9mMS1yYWNlLWRldGFpbHMvW2lkXVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2YxLXJhY2UtZGV0YWlscy9baWRdXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ff1-race-details%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ff1-race-details%2F%5Bid%5D.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/f1-api.ts":
/*!***********************!*\
  !*** ./lib/f1-api.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   f1API: () => (/* binding */ f1API)\n/* harmony export */ });\n// lib/f1-api.ts - VERSION INTELLIGENTE\n// 1 GP importé = toutes les sessions dynamiques\nconst RAPIDAPI_KEY = process.env.RAPIDAPI_KEY;\nconst RAPIDAPI_HOST = \"api-formula-1.p.rapidapi.com\";\nclass F1APIService {\n    async request(endpoint) {\n        if (!RAPIDAPI_KEY) {\n            throw new Error(\"RAPIDAPI_KEY non configur\\xe9e pour l'API F1\");\n        }\n        console.log(`🏁 API F1 Request: ${endpoint}`);\n        const response = await fetch(`${this.baseUrl}${endpoint}`, {\n            method: \"GET\",\n            headers: {\n                \"X-RapidAPI-Key\": RAPIDAPI_KEY,\n                \"X-RapidAPI-Host\": RAPIDAPI_HOST\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Erreur API F1: ${response.status} - ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data.response || data;\n    }\n    // 🎯 RÉCUPÉRER SEULEMENT LES WEEK-ENDS GP 2025\n    async getF1Weekends2025() {\n        try {\n            console.log(`🏁 Récupération des week-ends F1 2025...`);\n            // Récupérer toutes les courses 2025\n            const allRaces = await this.request(`/races?season=2025`);\n            console.log(`📊 Total événements trouvés: ${allRaces.length}`);\n            // 🔍 GROUPER par week-end de GP\n            const weekendMap = new Map();\n            allRaces.forEach((race)=>{\n                // Identifier le nom du GP principal (sans \"Practice\", \"Qualifying\", etc.)\n                let gpName = race.competition?.name || \"\";\n                // Nettoyer le nom pour grouper\n                gpName = gpName.replace(/Practice \\d+/g, \"\").replace(/Qualifying/g, \"\").replace(/Sprint.*$/g, \"\").replace(/\\s+/g, \" \").trim();\n                // Si c'est un vrai GP (contient \"Grand Prix\" ou \"GP\")\n                if (gpName.includes(\"Grand Prix\") || gpName.includes(\" GP\")) {\n                    const weekendKey = `${gpName}_${race.circuit?.name}`;\n                    if (!weekendMap.has(weekendKey)) {\n                        weekendMap.set(weekendKey, {\n                            id: race.id,\n                            name: gpName,\n                            circuit: race.circuit || {},\n                            location: race.competition?.location || {},\n                            date: race.date,\n                            status: race.status,\n                            sessions: []\n                        });\n                    }\n                    // Ajouter cette session au week-end\n                    const weekend = weekendMap.get(weekendKey);\n                    const sessionType = this.getSessionType(race.competition?.name || \"\");\n                    weekend.sessions.push({\n                        id: race.id,\n                        type: sessionType,\n                        name: race.competition?.name || \"\",\n                        date: race.date,\n                        status: race.status\n                    });\n                }\n            });\n            const weekends = Array.from(weekendMap.values());\n            console.log(`✅ ${weekends.length} week-ends GP trouvés`);\n            // Afficher les week-ends trouvés\n            weekends.forEach((weekend, index)=>{\n                console.log(`${index + 1}. ${weekend.name} - ${weekend.circuit.name}`);\n                console.log(`   Sessions: ${weekend.sessions.map((s)=>s.type).join(\", \")}`);\n            });\n            return weekends;\n        } catch (error) {\n            console.error(\"❌ Erreur getF1Weekends2025:\", error);\n            return [];\n        }\n    }\n    // 🔍 DÉTERMINER LE TYPE DE SESSION\n    getSessionType(sessionName) {\n        const name = sessionName.toLowerCase();\n        if (name.includes(\"practice\") || name.includes(\"free practice\")) {\n            return \"practice\";\n        }\n        if (name.includes(\"qualifying\")) {\n            return \"qualifying\";\n        }\n        if (name.includes(\"sprint\")) {\n            return \"sprint\";\n        }\n        return \"race\" // Course principale par défaut\n        ;\n    }\n    // 🏁 RÉCUPÉRER TOUTES LES SESSIONS D'UN WEEK-END\n    async getWeekendDetails(weekendId) {\n        try {\n            console.log(`🏁 Récupération détails week-end ${weekendId}...`);\n            // Récupérer le week-end depuis la base\n            const { PrismaClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @prisma/client */ \"@prisma/client\", 23));\n            const prisma = new PrismaClient();\n            const match = await prisma.match.findUnique({\n                where: {\n                    id: weekendId\n                }\n            });\n            if (!match || match.sport !== \"F1\") {\n                throw new Error(\"Week-end F1 non trouv\\xe9\");\n            }\n            // Récupérer les détails depuis l'API si on a l'ID API\n            if (match.apiMatchId) {\n                return await this.getWeekendSessionsFromAPI(match.apiMatchId);\n            }\n            // Sinon générer des données mock\n            return this.generateMockWeekendData(match);\n        } catch (error) {\n            console.error(\"❌ Erreur getWeekendDetails:\", error);\n            throw error;\n        }\n    }\n    // 📡 RÉCUPÉRER LES SESSIONS DEPUIS L'API\n    async getWeekendSessionsFromAPI(apiRaceId) {\n        try {\n            const sessions = {\n                race: null,\n                qualifying: null,\n                sprint: null,\n                practice: null\n            };\n            // Essayer de récupérer chaque type de session\n            try {\n                sessions.race = await this.request(`/races/${apiRaceId}/results`);\n                console.log(`✅ Course principale: ${sessions.race?.length || 0} résultats`);\n            } catch (e) {\n                console.log(\"⚠️ Pas de r\\xe9sultats de course\");\n            }\n            try {\n                sessions.qualifying = await this.request(`/races/${apiRaceId}/qualifying`);\n                console.log(`✅ Qualifications: ${sessions.qualifying?.length || 0} résultats`);\n            } catch (e) {\n                console.log(\"⚠️ Pas de r\\xe9sultats de qualifications\");\n            }\n            try {\n                sessions.sprint = await this.request(`/races/${apiRaceId}/sprint`);\n                console.log(`✅ Sprint: ${sessions.sprint?.length || 0} résultats`);\n            } catch (e) {\n                console.log(\"⚠️ Pas de course sprint\");\n            }\n            // Note: On ignore les essais libres pour éviter le spam\n            return {\n                sessions\n            };\n        } catch (error) {\n            console.error(\"❌ Erreur API sessions:\", error);\n            return {\n                sessions: {}\n            };\n        }\n    }\n    // 🎭 GÉNÉRER DES DONNÉES MOCK POUR TEST\n    generateMockWeekendData(match) {\n        const mockDrivers = [\n            {\n                name: \"Max Verstappen\",\n                number: 1,\n                team: \"Red Bull Racing\"\n            },\n            {\n                name: \"Sergio P\\xe9rez\",\n                number: 11,\n                team: \"Red Bull Racing\"\n            },\n            {\n                name: \"Lando Norris\",\n                number: 4,\n                team: \"McLaren\"\n            },\n            {\n                name: \"Oscar Piastri\",\n                number: 81,\n                team: \"McLaren\"\n            },\n            {\n                name: \"Charles Leclerc\",\n                number: 16,\n                team: \"Ferrari\"\n            },\n            {\n                name: \"Carlos Sainz\",\n                number: 55,\n                team: \"Ferrari\"\n            },\n            {\n                name: \"Lewis Hamilton\",\n                number: 44,\n                team: \"Mercedes\"\n            },\n            {\n                name: \"George Russell\",\n                number: 63,\n                team: \"Mercedes\"\n            },\n            {\n                name: \"Fernando Alonso\",\n                number: 14,\n                team: \"Aston Martin\"\n            },\n            {\n                name: \"Lance Stroll\",\n                number: 18,\n                team: \"Aston Martin\"\n            }\n        ];\n        const shuffled = [\n            ...mockDrivers\n        ].sort(()=>Math.random() - 0.5);\n        // Générer résultats de course\n        const raceResults = shuffled.map((driver, index)=>({\n                driver: {\n                    id: index + 1,\n                    name: driver.name,\n                    abbr: driver.name.split(\" \").map((n)=>n[0]).join(\"\"),\n                    number: driver.number,\n                    team: driver.team\n                },\n                position: index + 1,\n                time: index === 0 ? \"1:45:23.456\" : `+${(index * 15 + Math.random() * 10).toFixed(3)}`,\n                points: [\n                    25,\n                    18,\n                    15,\n                    12,\n                    10,\n                    8,\n                    6,\n                    4,\n                    2,\n                    1,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0\n                ][index] || 0,\n                laps: 70,\n                grid: Math.floor(Math.random() * 20) + 1\n            }));\n        // Générer qualifications (ordre différent)\n        const qualifyingResults = [\n            ...shuffled\n        ].sort(()=>Math.random() - 0.5).map((driver, index)=>({\n                driver: {\n                    id: index + 1,\n                    name: driver.name,\n                    abbr: driver.name.split(\" \").map((n)=>n[0]).join(\"\"),\n                    number: driver.number,\n                    team: driver.team\n                },\n                position: index + 1,\n                time: `1:${(18 + Math.floor(index / 5)).toString().padStart(2, \"0\")}.${Math.floor(Math.random() * 999).toString().padStart(3, \"0\")}`,\n                gap: index === 0 ? null : `+${(index * 0.2 + Math.random() * 0.3).toFixed(3)}`\n            }));\n        return {\n            sessions: {\n                race: raceResults,\n                qualifying: qualifyingResults,\n                sprint: Math.random() > 0.5 ? raceResults.slice(0, 10) : null // Parfois pas de sprint\n            }\n        };\n    }\n    // 🆕 IMPORT OPTIMISÉ : 1 WEEK-END = 1 ENTRÉE\n    async importF1Weekends2025() {\n        const result = {\n            imported: 0,\n            skipped: 0,\n            errors: 0,\n            examples: []\n        };\n        try {\n            const weekends = await this.getF1Weekends2025();\n            console.log(`🏁 ${weekends.length} week-ends F1 trouvés pour 2025`);\n            const { PrismaClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @prisma/client */ \"@prisma/client\", 23));\n            const prisma = new PrismaClient();\n            for (const weekend of weekends){\n                try {\n                    console.log(`🔍 Traitement week-end: ${weekend.name}`);\n                    // Vérifier si ce week-end existe déjà\n                    const existing = await prisma.match.findFirst({\n                        where: {\n                            homeTeam: weekend.name,\n                            awayTeam: weekend.circuit.name,\n                            season: \"2025\",\n                            sport: \"F1\"\n                        }\n                    });\n                    if (existing) {\n                        console.log(`⚠️ Week-end déjà existant: ${weekend.name}`);\n                        result.skipped++;\n                        continue;\n                    }\n                    // Créer le week-end F1\n                    const weekendData = {\n                        apiMatchId: weekend.id,\n                        sport: \"F1\",\n                        homeTeam: weekend.name,\n                        awayTeam: weekend.circuit.name,\n                        homeScore: null,\n                        awayScore: null,\n                        date: new Date(weekend.date),\n                        status: this.convertF1Status(weekend.status),\n                        competition: \"Formula 1 2025\",\n                        season: \"2025\",\n                        venue: `${weekend.circuit.name}, ${weekend.location.city}`,\n                        referee: null,\n                        homeTeamLogo: weekend.circuit.image || null,\n                        awayTeamLogo: null,\n                        details: {\n                            type: \"F1_WEEKEND\",\n                            circuit: weekend.circuit,\n                            location: weekend.location,\n                            sessions: weekend.sessions,\n                            totalSessions: weekend.sessions.length,\n                            hasRace: weekend.sessions.some((s)=>s.type === \"race\"),\n                            hasQualifying: weekend.sessions.some((s)=>s.type === \"qualifying\"),\n                            hasSprint: weekend.sessions.some((s)=>s.type === \"sprint\")\n                        }\n                    };\n                    await prisma.match.create({\n                        data: weekendData\n                    });\n                    result.imported++;\n                    result.examples.push(`${weekend.name} (${weekend.sessions.length} sessions)`);\n                    console.log(`✅ Week-end importé: ${weekend.name}`);\n                } catch (error) {\n                    console.error(`❌ Erreur import week-end ${weekend.id}:`, error);\n                    result.errors++;\n                }\n            }\n            await prisma.$disconnect();\n        } catch (error) {\n            console.error(\"❌ Erreur importF1Weekends2025:\", error);\n            result.errors++;\n        }\n        return result;\n    }\n    convertF1Status(f1Status) {\n        const statusMap = {\n            \"Completed\": \"FINISHED\",\n            \"Finished\": \"FINISHED\",\n            \"Cancelled\": \"CANCELLED\",\n            \"Postponed\": \"POSTPONED\",\n            \"Scheduled\": \"SCHEDULED\"\n        };\n        return statusMap[f1Status] || f1Status;\n    }\n    // Autres méthodes inchangées...\n    async getDrivers(season = 2025) {\n        try {\n            console.log(`👨‍✈️ Récupération pilotes F1 ${season}...`);\n            const drivers = await this.request(`/drivers?season=${season}`);\n            console.log(`✅ ${drivers.length} pilotes trouvés pour ${season}`);\n            return drivers;\n        } catch (error) {\n            console.error(\"❌ Erreur getDrivers:\", error);\n            return [];\n        }\n    }\n    async testConnection2025() {\n        try {\n            console.log(\"\\uD83D\\uDD0D Test connexion API F1 2025 - Week-ends...\");\n            const weekends = await this.getF1Weekends2025();\n            return {\n                success: true,\n                message: `✅ API F1 connectée - ${weekends.length} week-ends GP trouvés pour 2025`,\n                data: {\n                    weekends: weekends.length,\n                    examples: weekends.slice(0, 3).map((w)=>`${w.name} (${w.sessions.length} sessions)`),\n                    details: \"Regroupement intelligent par week-end de GP\"\n                }\n            };\n        } catch (error) {\n            console.error(\"❌ Erreur test F1 2025:\", error);\n            return {\n                success: false,\n                message: `❌ Erreur API F1: ${error.message}`\n            };\n        }\n    }\n    constructor(){\n        this.baseUrl = `https://${RAPIDAPI_HOST}`;\n    }\n}\nconst f1API = new F1APIService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/f1-api.ts\n");

/***/ }),

/***/ "(api)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUU3QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFFO0FBRWxFLElBQUlJLElBQXlCLEVBQWNILGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLy4vbGliL3ByaXNtYS50cz85ODIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xuXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KClcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWFcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/prisma.ts\n");

/***/ }),

/***/ "(api)/./pages/api/f1-race-details/[id].ts":
/*!*******************************************!*\
  !*** ./pages/api/f1-race-details/[id].ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_f1_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/f1-api */ \"(api)/./lib/f1-api.ts\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/prisma */ \"(api)/./lib/prisma.ts\");\n// pages/api/f1-race-details/[id].ts\n\n\nasync function handler(req, res) {\n    const { id } = req.query;\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        console.log(`🏁 Récupération détails F1 pour match ${id}...`);\n        // 1. Récupérer le match F1 de la DB\n        const match = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.match.findUnique({\n            where: {\n                id: id\n            }\n        });\n        if (!match || match.sport !== \"F1\") {\n            return res.status(404).json({\n                error: \"Course F1 non trouv\\xe9e\"\n            });\n        }\n        console.log(`🏁 Course trouvée: ${match.homeTeam} (API ID: ${match.apiMatchId})`);\n        // 2. Essayer de récupérer les données de l'API F1\n        let raceResults = [];\n        let qualifying = [];\n        let drivers = [];\n        try {\n            console.log(`🔍 Récupération données API F1 pour course ${match.apiMatchId}...`);\n            // Récupérer les résultats de la course\n            raceResults = await _lib_f1_api__WEBPACK_IMPORTED_MODULE_0__.f1API.getRaceResults(match.apiMatchId);\n            console.log(`✅ ${raceResults.length} résultats récupérés`);\n            // Récupérer les qualifications\n            qualifying = await _lib_f1_api__WEBPACK_IMPORTED_MODULE_0__.f1API.getQualifying(match.apiMatchId);\n            console.log(`✅ ${qualifying.length} qualifications récupérées`);\n            // Récupérer tous les pilotes de la saison\n            const season = parseInt(match.season) || 2024;\n            drivers = await _lib_f1_api__WEBPACK_IMPORTED_MODULE_0__.f1API.getDrivers(season);\n            console.log(`✅ ${drivers.length} pilotes récupérés`);\n            // Si on a des résultats réels, les utiliser\n            if (raceResults.length > 0) {\n                console.log(\"\\uD83C\\uDFAF Utilisation des donn\\xe9es API r\\xe9elles\");\n                drivers = raceResults // Les résultats contiennent déjà les infos des pilotes\n                ;\n            }\n        } catch (apiError) {\n            console.error(\"⚠️ Erreur API F1, g\\xe9n\\xe9ration donn\\xe9es mock:\", apiError);\n            // Générer des données mock si l'API ne répond pas\n            const mockData = generateMockF1Data(match.homeTeam);\n            raceResults = mockData.results;\n            qualifying = mockData.qualifying;\n            drivers = mockData.drivers;\n        }\n        // 3. Formater les données pour l'interface\n        const formattedResults = formatF1Results(raceResults);\n        const formattedQualifying = formatF1Results(qualifying);\n        const formattedDrivers = formatF1Drivers(drivers);\n        // 4. Retourner les données\n        res.status(200).json({\n            success: true,\n            race: {\n                id: match.id,\n                name: match.homeTeam,\n                circuit: match.awayTeam,\n                date: match.date,\n                venue: match.venue,\n                apiId: match.apiMatchId\n            },\n            results: formattedResults,\n            qualifying: formattedQualifying,\n            drivers: formattedDrivers,\n            source: raceResults.length > 0 ? \"api\" : \"mock\"\n        });\n    } catch (error) {\n        console.error(\"❌ Erreur d\\xe9tails F1:\", error);\n        res.status(500).json({\n            success: false,\n            error: \"Erreur lors de la r\\xe9cup\\xe9ration des d\\xe9tails F1\",\n            message: error instanceof Error ? error.message : \"Unknown error\"\n        });\n    }\n}\n// Formater les résultats F1 pour l'interface\nfunction formatF1Results(results) {\n    if (!results || results.length === 0) return [];\n    return results.map((result, index)=>({\n            id: result.driver?.id || result.id || index + 1,\n            name: result.driver?.name || result.name || `Driver ${index + 1}`,\n            abbr: result.driver?.abbr || result.abbr || result.driver?.name?.split(\" \").map((n)=>n[0]).join(\"\") || \"DRV\",\n            number: result.driver?.number || result.number || index + 1,\n            team: result.team?.name || result.team || \"Team\",\n            position: result.position || index + 1,\n            time: result.time || (index === 0 ? \"1:42:34.567\" : `+${(index * 12 + Math.random() * 10).toFixed(3)}`),\n            points: result.points || (index < 10 ? [\n                25,\n                18,\n                15,\n                12,\n                10,\n                8,\n                6,\n                4,\n                2,\n                1\n            ][index] : 0),\n            grid: result.grid || Math.floor(Math.random() * 20) + 1,\n            fastest_lap: result.fastest_lap\n        }));\n}\n// Formater les pilotes pour la notation\nfunction formatF1Drivers(drivers) {\n    if (!drivers || drivers.length === 0) {\n        return generateMockF1Data(\"Mock Race\").drivers;\n    }\n    return drivers.map((driver, index)=>({\n            id: driver.driver?.id || driver.id || index + 1,\n            name: driver.driver?.name || driver.name || `Driver ${index + 1}`,\n            abbr: driver.driver?.abbr || driver.abbr || \"DRV\",\n            number: driver.driver?.number || driver.number || index + 1,\n            team: driver.team?.name || driver.team || \"Team\",\n            position: driver.position || index + 1,\n            time: driver.time,\n            points: driver.points,\n            grid: driver.grid\n        }));\n}\n// Fonction pour générer des données F1 mock réalistes\nfunction generateMockF1Data(raceName) {\n    const drivers = [\n        {\n            name: \"Max Verstappen\",\n            number: 1,\n            team: \"Red Bull Racing\"\n        },\n        {\n            name: \"Sergio P\\xe9rez\",\n            number: 11,\n            team: \"Red Bull Racing\"\n        },\n        {\n            name: \"Lando Norris\",\n            number: 4,\n            team: \"McLaren\"\n        },\n        {\n            name: \"Oscar Piastri\",\n            number: 81,\n            team: \"McLaren\"\n        },\n        {\n            name: \"Charles Leclerc\",\n            number: 16,\n            team: \"Ferrari\"\n        },\n        {\n            name: \"Carlos Sainz\",\n            number: 55,\n            team: \"Ferrari\"\n        },\n        {\n            name: \"Lewis Hamilton\",\n            number: 44,\n            team: \"Mercedes\"\n        },\n        {\n            name: \"George Russell\",\n            number: 63,\n            team: \"Mercedes\"\n        },\n        {\n            name: \"Fernando Alonso\",\n            number: 14,\n            team: \"Aston Martin\"\n        },\n        {\n            name: \"Lance Stroll\",\n            number: 18,\n            team: \"Aston Martin\"\n        },\n        {\n            name: \"Pierre Gasly\",\n            number: 10,\n            team: \"Alpine\"\n        },\n        {\n            name: \"Esteban Ocon\",\n            number: 31,\n            team: \"Alpine\"\n        },\n        {\n            name: \"Alex Albon\",\n            number: 23,\n            team: \"Williams\"\n        },\n        {\n            name: \"Logan Sargeant\",\n            number: 2,\n            team: \"Williams\"\n        },\n        {\n            name: \"Yuki Tsunoda\",\n            number: 22,\n            team: \"RB\"\n        },\n        {\n            name: \"Daniel Ricciardo\",\n            number: 3,\n            team: \"RB\"\n        },\n        {\n            name: \"Valtteri Bottas\",\n            number: 77,\n            team: \"Kick Sauber\"\n        },\n        {\n            name: \"Zhou Guanyu\",\n            number: 24,\n            team: \"Kick Sauber\"\n        },\n        {\n            name: \"Kevin Magnussen\",\n            number: 20,\n            team: \"Haas\"\n        },\n        {\n            name: \"Nico H\\xfclkenberg\",\n            number: 27,\n            team: \"Haas\"\n        }\n    ];\n    // Points F1 réalistes\n    const points = [\n        25,\n        18,\n        15,\n        12,\n        10,\n        8,\n        6,\n        4,\n        2,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    // Générer les résultats de course\n    const shuffledDrivers = [\n        ...drivers\n    ].sort(()=>Math.random() - 0.5);\n    const results = shuffledDrivers.map((driver, index)=>({\n            id: index + 1,\n            name: driver.name,\n            abbr: driver.name.split(\" \").map((n)=>n[0]).join(\"\"),\n            number: driver.number,\n            team: driver.team,\n            position: index + 1,\n            time: index === 0 ? \"1:42:34.567\" : `+${(index * 12 + Math.random() * 10).toFixed(3)}`,\n            points: points[index] || 0,\n            grid: Math.floor(Math.random() * 20) + 1,\n            fastest_lap: index === 0 ? {\n                lap: Math.floor(Math.random() * 50) + 10,\n                time: \"1:18.234\",\n                speed: \"320.5 km/h\"\n            } : undefined\n        }));\n    // Générer les qualifications (ordre différent)\n    const qualifyingOrder = [\n        ...drivers\n    ].sort(()=>Math.random() - 0.5);\n    const qualifying = qualifyingOrder.map((driver, index)=>({\n            id: index + 1,\n            name: driver.name,\n            abbr: driver.name.split(\" \").map((n)=>n[0]).join(\"\"),\n            number: driver.number,\n            team: driver.team,\n            position: index + 1,\n            time: `1:${(18 + Math.floor(index / 5)).toString().padStart(2, \"0\")}.${Math.floor(Math.random() * 999).toString().padStart(3, \"0\")}`,\n            grid: index + 1\n        }));\n    return {\n        results,\n        qualifying,\n        drivers: results // Les pilotes avec leurs données de course\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/f1-race-details/[id].ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ff1-race-details%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ff1-race-details%2F%5Bid%5D.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();